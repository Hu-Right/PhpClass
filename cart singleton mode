<?php
session_start();
#session_start()开启session
class cart{
#创建一个购物车类
private static $ints = null;
#创建一个私有属性静态变量成员
private $goods_cart = array();
#创建一个私有数组用于存放商品的数量
final protected function __construct(){
 #创建一个私有构造方法
 }
final protected function __clone(){
  #防止克隆防止继承
  }
#设置实例 --需要一个保存唯一的实例的静态成员变量
protected static function getint(){
 if(!(self::$ints instanceof self)){
     #instanceof 确定是不是这个类的
    self::$ints = new self();
  }
  return self::$ints;  
}
#获取实例 --把cart 单例存在session中
public static function getcer(){
 if(!isset($_SESSION['cart'])|| !($_SESSION['cart'] instanceof self)){
            $_SESSION['cart'] = self::getint();
         }
         return $_SESSION['cart'];
}

  //清空购物车
     public function clear(){
        $this->alit = array();
        //数组至于空值
     }
     //添加商品
     public function addgoos($id,$name,$price,$num=1){
        if($this->has($id)){
             #如果该商品存在直接增加其数量
            $this->incnum($id,$num=1);
            return;
         }
         $item =array();
         $item['name'] = $name;
         $item['price'] =$price;
         $item['num'] = $num;
         $this->alit[$id] = $item; 
        }

        //统计商品的数量
        public function countunm(){
            return count($this->alit);
        }
        //种类
        public function goodstype(){
            if($this->countunm()==0){
                return 0;
            }
            $sum = 0;
            foreach($this->alit as $k=>$v){
                $sum += $v['num'];
            }
            return $sum;
            
        }
        //返回购物车所有商品
        public function backall(){
            return $this->alit;
        }
        //查询购物车的总金额,
        public function priceunm(){
            if($this->countunm()==0){
               return 0; 
            }
            $price = 0.0;
            foreach($this->alit as $v ){
                $price = $v['num'] * $v['price'];
            }
            return $price;
        } 
        //判断商品是否存在 $id
        public function has($id){
            return array_key_exists($id,$this->alit);
        }
        //商品+1
        public function incnum($id,$num=1){
            if($this->has($id)){
                $this->alit[$id]['num']+=$num;
            }
        }
        //商品-1 #存在如何为零时
        public function incnums($id,$num){
            if($this->has($id)){
                $this->alit[$id]['num']-=$num;
            }
            if($this->alit[$id]['num']<1){
                $this->delect($id);
            } 
        }
        //删除商品
        public function delect($id){
            unset($this->alit[$id]);
        }

        //修改购物车的商品数量
        /**
         * param int $id
         * param int $num
         */
        public function savenum($id,$num){
          if(!$this->has($id)){
            return false;
          }
          else{
              $this->alit[$id]['num'] =$num;
          }
        }
   }
   //
    $cars = cat::getcer();
    #静态方法实例对象 赋值给变量 $cars
   if(!isset($_GET['test'])){
        $_GET['test'] = '';
    }

   if($_GET['test']=='add'){
     $cars->addgoos(1,'王八',23.5,1);
     echo '新增成功';
    }
    else if($_GET['test']=="fas"){
        $cars->addgoos(2,'方舟',467.6,1);
        echo"新增成功";
    }
  
  
    else if($_GET['test']=='clear'){
      $cars->clear(); 
      echo "清除成功";
    }

    else if($_GET['test']=='show'){
        print_r($cars->backall());
        #显示商品
        echo "<br/>";
        echo "共",$cars->countunm().'种'.$cars->goodstype().'个商品'."<hr>";
        echo "共",$cars->priceunm().'元'."<hr/>";
        
     }

    else{
        print_r($cars->backall());
        #打印显示
    }


?>
